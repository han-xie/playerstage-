description { 
* @brief \b DEPRECATED cyzxLaser range-finder

The cyzxlaser interface provides access to a single-origin scanning
range sensor, such as a SICK cyzxlaser range-finder (e.g., @ref
driver_sicklms200).

Devices supporting the cyzxlaser interface can be configured to scan at
different angles and resolutions.  As such, the data returned by the
cyzxlaser interface can take different forms.  To make interpretation of the
data simple, the cyzxlaser data packet contains some extra fields before
the actual range data.  These fields tell the client the starting and
ending angles of the scan, the angular resolution of the scan, and the
number of range readings included.  Scans proceed counterclockwise about
the cyzxlaser (0 degrees is forward).  The cyzxlaser can return a maximum of
@ref PLAYER_cyzxLASER_MAX_SAMPLES readings; this limits the valid combinations
of scan width and angular resolution.

This interface is \b deprecated. Use the @ref interface_ranger instead.
}

/** Data subtype: scan */
message { DATA, SCAN, 1, player_cyzxlaser_data_t };
/** Data subtype: pose-stamped scan */
message { DATA, SCANPOSE, 2, player_cyzxlaser_data_scanpose_t };
/** Data subtype: angle-stamped scan */
message { DATA, SCANANGLE, 3, player_cyzxlaser_data_scanangle_t };

message { CMD, SETWEIBO , 1, player_cyzxlaser_opaque_data_t };
message { CMD, SETLCD , 2, player_cyzxlaser_opaque_data_t };
message { CMD, SETSOUND , 3, player_cyzxlaser_opaque_data_t };

/** Request/reply subtype: get geometry */
message { REQ, GET_GEOM, 1, player_cyzxlaser_geom_t };
/** Request/reply subtype: set configuration */
message { REQ, SET_CONFIG, 2, player_cyzxlaser_config_t };
/** Request/reply subtype: get configuration */
message { REQ, GET_CONFIG, 3, player_cyzxlaser_config_t };
/** Request/reply subtype: set power */
message { REQ, POWER, 4, player_cyzxlaser_power_config_t };
/** Request/reply subtype: get IDentification information */
message { REQ, GET_ID, 5, player_cyzxlaser_get_id_config_t };
/** Request/reply subtype: set filter settings */
message { REQ, SET_FILTER, 6, player_cyzxlaser_set_filter_config_t };
message { REQ, GETWEIBO, 7, player_cyzxlaser_opaque_data_t };


/** Filter setings */
#define PLAYER_cyzxLASER_MAX_FILTER_PARAMS 8
#define PLAYER_cyzxLASER_FILTER_MEDIAN 1
#define PLAYER_cyzxLASER_FILTER_EDGE   2
#define PLAYER_cyzxLASER_FILTER_RANGE  3
#define PLAYER_cyzxLASER_FILTER_MEAN   4

/** @brief Data: scan (@ref PLAYER_cyzxLASER_DATA_SCAN)

The basic cyzxlaser data packet.  */
typedef struct player_cyzxlaser_data
{
  /** Start and end angles for the cyzxlaser scan [rad].  */
  float min_angle;
  /** Start and end angles for the cyzxlaser scan [rad].  */
  float max_angle;
  /** Angular resolution [rad].  */
  float resolution;
  /** Maximum range [m]. */
  float max_range;
  /** Number of range readings.  */
  uint32_t ranges_count;
  /** Range readings [m]. */
  float *ranges;
  /** Number of intensity readings */
  uint32_t intensity_count;
  /** Intensity readings. */
  uint8_t *intensity;
  /** A unique, increasing, ID for the scan */
  uint32_t id;
} player_cyzxlaser_data_t;


typedef struct player_cyzxlaser_opaque_data
{
  /** Size of data as stored in buffer (bytes) */
  uint32_t data_count;
  /** The data we will be sending */
  uint8_t *data;
} player_cyzxlaser_opaque_data_t;


/** @brief Data: pose-stamped scan (@ref PLAYER_cyzxLASER_DATA_SCANPOSE)

A cyzxlaser scan with a pose that indicates the (possibly esimated) pose of the
cyzxlaser when the scan was taken. */
typedef struct player_cyzxlaser_data_scanpose
{
  /** The scan data */
  player_cyzxlaser_data_t scan;
  /** The global pose of the cyzxlaser at the time the scan was acquired */
  player_pose2d_t pose;
} player_cyzxlaser_data_scanpose_t;

/** @brief Data: scan (@ref PLAYER_cyzxLASER_DATA_SCANANGLE)

The basic cyzxlaser angle stamped data packet.  */
typedef struct player_cyzxlaser_data_scanangle
{
  /** Maximum range [m]. */
  float max_range;
  /** Number of range readings.  */
  uint32_t ranges_count;
  /** Range readings [m]. */
  float *ranges;
  /** Number of agle readings. */
  uint32_t angles_count;
  /** Angle readings [m]. */
  float *angles;
  /** Number of intensity readings */
  uint32_t intensity_count;
  /** Intensity readings. */
  uint8_t *intensity;
  /** A unique, increasing, ID for the scan */
  uint32_t id;
} player_cyzxlaser_data_scanangle_t;


/** @brief Request/reply: Get geometry.

The cyzxlaser geometry (position and size) can be queried by sending a
null @ref PLAYER_cyzxLASER_REQ_GET_GEOM request. */
typedef struct player_cyzxlaser_geom
{
  /** cyzxLaser pose, in robot cs (m, m, m, rad, rad, rad). */
  player_pose3d_t pose;
  /** cyzxLaser dimensions (m, m, m). */
  player_bbox3d_t size;
} player_cyzxlaser_geom_t;

/** @brief Request/reply: Get/set scan properties.

The scan configuration (resolution, aperture, etc) can be queried by
sending a null @ref PLAYER_cyzxLASER_REQ_GET_CONFIG request and modified by
sending a @ref PLAYER_cyzxLASER_REQ_SET_CONFIG request.  In either case, the
current configuration (after attempting any requested modification) will
be returned in the response.  Read the documentation for your driver to
determine what configuration values are permissible. */
typedef struct player_cyzxlaser_config
{
  /** Start and end angles for the cyzxlaser scan [rad].*/
  float min_angle;
  /** Start and end angles for the cyzxlaser scan [rad].*/
  float max_angle;
  /** Scan resolution [rad].  */
  float resolution;
  /** Maximum range [m] */
  float max_range;
  /** Range Resolution [m] */
  float range_res;
  /** Enable reflection intensity data. */
  uint8_t  intensity;
  /** Scanning frequency [Hz] */
  float scanning_frequency;
} player_cyzxlaser_config_t;

/** @brief Request/reply: Turn power on/off.

Send a @ref PLAYER_cyzxLASER_REQ_POWER request to turn cyzxlaser power on or off
(assuming your hardware supports it). */
typedef struct player_cyzxlaser_power_config
{
  /** FALSE to turn cyzxlaser off, TRUE to turn cyzxlaser on */
  uint8_t state;
} player_cyzxlaser_power_config_t;

/** @brief Request/reply: Get IDentification information.

Send a @ref PLAYER_cyzxLASER_REQ_GET_ID request to receive the cyzxlaser's serial number
or any other relevant identification information (assuming your hardware supports it). */
typedef struct player_cyzxlaser_get_id_config
{
  /** cyzxLaser device serial number. */
  uint32_t serial_number;
} player_cyzxlaser_get_id_config_t;

/** @brief Request/reply: Set filter settings.

Send a @ref PLAYER_cyzxLASER_REQ_SET_FILTER request to set the cyzxlaser's internal
filter parameters (assuming your hardware supports it). Currently the
finally settings can be applied to the SICK LMS400:
 a) median filter - PLAYER_cyzxLASER_FILTER_MEDIAN, no parameters
 b) edge filter   - PLAYER_cyzxLASER_FILTER_EDGE, no parameters
 c) range filter  - PLAYER_cyzxLASER_FILTER_RANGE
    p1 = BottomLimit (700-3000 in mm), p2 = TopLimit (700-3000 in mm)
 d) mean filter   - PLAYER_cyzxLASER_FILTER_MEAN
    p1 = number of means (2-200)

Note: You can combine the filters as required. If several filters are
active, then the filters act one after the other on the result of the
previous filter. The processing in this case follows the following sequence:
edge filter, median filter, range filter, mean filter.
*/
typedef struct player_cyzxlaser_set_filter_config
{
  /** Filter type. */
  uint8_t filter_type;
  /** The number of filter parameters */
  uint32_t parameters_count;
  /** Filter parameters */
  float parameters[PLAYER_cyzxLASER_MAX_FILTER_PARAMS];
} player_cyzxlaser_set_filter_config_t;

